// Generated by CoffeeScript 1.10.0
var babel, fs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs');

babel = require('babel-core');

module.exports = function(env, callback) {
  var BabelPlugin, config, pattern;
  config = env.config.babel || {};
  if (config.pattern != null) {
    pattern = config.pattern;
    delete config.pattern;
  }
  BabelPlugin = (function(superClass) {
    extend(BabelPlugin, superClass);

    function BabelPlugin(filepath1, text) {
      this.filepath = filepath1;
      this.text = text;
    }

    BabelPlugin.prototype.getFilename = function() {
      return this.filepath.relative;
    };

    BabelPlugin.prototype.getView = function() {
      return function(env, locals, contents, templates, callback) {
        return callback(null, new Buffer(babel.transform(this.text, config).code));
      };
    };

    return BabelPlugin;

  })(env.ContentPlugin);
  BabelPlugin.fromFile = function(filepath, callback) {
    return fs.readFile(filepath.full, function(error, result) {
      var plugin;
      if (error == null) {
        plugin = new BabelPlugin(filepath, result.toString());
      }
      return callback(error, plugin);
    });
  };
  env.registerContentPlugin('scripts', pattern || '**/*.*(js|es|es6|jsx)', BabelPlugin);
  return callback();
};
